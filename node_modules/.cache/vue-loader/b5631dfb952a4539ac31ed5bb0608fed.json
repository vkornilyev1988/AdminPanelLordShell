{"remainingRequest":"/root/build/AdminPanelLordShell/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/root/build/AdminPanelLordShell/node_modules/cache-loader/dist/cjs.js??ref--0-0!/root/build/AdminPanelLordShell/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/build/AdminPanelLordShell/src/layout/partials/Header.vue?vue&type=template&id=6713abfe&scoped=true&","dependencies":[{"path":"/root/build/AdminPanelLordShell/src/layout/partials/Header.vue","mtime":1658913658780},{"path":"/root/build/AdminPanelLordShell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/build/AdminPanelLordShell/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/root/build/AdminPanelLordShell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/build/AdminPanelLordShell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}